---
import { languages } from "../i18n/ui";
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const currentPath = Astro.url.pathname;
const [, currentLang, ...restPathParts] = currentPath.split("/");
const restPath = restPathParts.join("/");
---

<footer class="footer">
  <div class="footer-container">
    <div class="footer-content">
      <!-- Left side - could add logo or text here if needed -->
      <div class="footer-left">
        <!-- Empty space for now, can add branding/logo later -->
      </div>

      <!-- Right side - Dropdowns -->
      <div class="footer-dropdowns">
        <!-- Language Dropdown -->
        <div class="dropdown">
          <button id="lang-dropdown-btn" class="dropdown-btn">
            <span class="dropdown-icon">üåç</span>
            <span class="dropdown-label">
              {languages[currentLang] ?? currentLang}
            </span>
            <svg
              width="14"
              height="14"
              viewBox="0 0 15 15"
              class="dropdown-arrow"
              aria-hidden="true"
            >
              <path
                d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"></path>
            </svg>
          </button>
          <div id="lang-dropdown-menu" class="dropdown-menu" hidden>
            {
              Object.entries(languages).map(([code, label]) => {
                const newPath = `/${code}/${restPath}`;
                const isCurrent = code === currentLang;
                return (
                  <a
                    href={newPath}
                    class:list={{
                      "dropdown-item": true,
                      "dropdown-item-current": isCurrent,
                    }}
                  >
                    {label}
                  </a>
                );
              })
            }
          </div>
        </div>

        <!-- Quiz Type Dropdown -->
        <div class="dropdown">
          <button id="quiz-dropdown-btn" class="dropdown-btn">
            <span class="dropdown-icon">üß†</span>
            <span class="dropdown-label">
              {
                currentPath.includes("multi-choice")
                  ? t("ui.multipleChoice")
                  : t("ui.singleChoice")
              }
            </span>
            <svg
              width="14"
              height="14"
              viewBox="0 0 15 15"
              class="dropdown-arrow"
              aria-hidden="true"
            >
              <path
                d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"></path>
            </svg>
          </button>
          <div id="quiz-dropdown-menu" class="dropdown-menu" hidden>
            <a
              href={`/${currentLang}/`}
              class:list={{
                "dropdown-item": true,
                "dropdown-item-current": !currentPath.includes("multi-choice"),
              }}
            >
              {t("ui.singleChoice")}
            </a>
            <a
              href={`/${currentLang}/multi-choice`}
              class:list={{
                "dropdown-item": true,
                "dropdown-item-current": currentPath.includes("multi-choice"),
              }}
            >
              {t("ui.multipleChoice")}
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</footer>

<style>
  .footer {
    width: 100%;
    background-color: #000;
    color: white;
    border-top: 1px solid #333;
  }

  .footer-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1.5rem;
  }

  .footer-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    gap: 1.5rem;
  }

  .footer-left {
    flex: 1;
  }

  .footer-dropdowns {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .footer-content {
      flex-direction: row;
    }
  }
  .dropdown {
    position: relative;
    width: auto;
    min-width: 140px;
  }

  .dropdown-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    width: 100%;
    font-weight: 500;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
  }

  .dropdown-btn:hover {
    background-color: rgba(255, 255, 255, 0.08);
    border-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }

  .dropdown-btn:active {
    transform: translateY(0);
  }

  .dropdown-icon {
    font-size: 1rem;
    opacity: 0.9;
  }

  .dropdown-label {
    flex: 1;
    text-align: left;
    color: rgba(255, 255, 255, 0.9);
  }

  .dropdown-arrow {
    opacity: 0.6;
    transition: transform 0.2s ease;
  }

  .dropdown-btn:hover .dropdown-arrow {
    opacity: 0.8;
  }

  .dropdown-menu {
    position: absolute;
    bottom: calc(100% + 8px);
    left: 0;
    right: 0;
    background-color: rgba(26, 26, 26, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.5rem;
    box-shadow:
      0 10px 25px -5px rgba(0, 0, 0, 0.3),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
    backdrop-filter: blur(20px);
    z-index: 1000;
    animation: dropdownFadeIn 0.15s ease-out;
  }

  @keyframes dropdownFadeIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .dropdown-item {
    display: block;
    padding: 0.625rem 0.75rem;
    border-radius: 6px;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.15s ease;
    border: 1px solid transparent;
  }

  .dropdown-item:hover {
    background-color: rgba(255, 255, 255, 0.08);
    color: rgba(255, 255, 255, 0.95);
    transform: translateX(2px);
  }

  .dropdown-item-current {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
    font-weight: 600;
    border-color: rgba(255, 255, 255, 0.2);
  }

  .dropdown-item-current:hover {
    background-color: rgba(255, 255, 255, 0.12);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .dropdown {
      min-width: 120px;
    }

    .dropdown-btn {
      padding: 0.625rem 0.875rem;
      font-size: 0.8rem;
    }

    .dropdown-label {
      font-size: 0.8rem;
    }
  }
</style>

<script is:inline>
  const toggleDropdown = (btnId, menuId) => {
    const btn = document.getElementById(btnId);
    const menu = document.getElementById(menuId);

    if (!btn || !menu) return;

    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const isOpen = !menu.hidden;

      // Close all other dropdowns
      document.querySelectorAll(".dropdown-menu").forEach((m) => {
        if (m !== menu) m.hidden = true;
      });

      // Toggle current dropdown
      menu.hidden = isOpen;

      // Rotate arrow based on state
      const arrow = btn.querySelector(".dropdown-arrow");
      if (arrow) {
        arrow.style.transform = menu.hidden ? "rotate(0deg)" : "rotate(180deg)";
      }
    });
  };

  // Initialize dropdowns
  toggleDropdown("lang-dropdown-btn", "lang-dropdown-menu");
  toggleDropdown("quiz-dropdown-btn", "quiz-dropdown-menu");

  // Close dropdowns when clicking outside
  document.addEventListener("click", (e) => {
    const dropdowns = document.querySelectorAll(".dropdown");
    let clickedInside = false;

    dropdowns.forEach((dropdown) => {
      if (dropdown.contains(e.target)) {
        clickedInside = true;
      }
    });

    if (!clickedInside) {
      document.querySelectorAll(".dropdown-menu").forEach((menu) => {
        menu.hidden = true;
        // Reset arrow rotation
        const btn = menu.previousElementSibling;
        const arrow = btn?.querySelector(".dropdown-arrow");
        if (arrow) {
          arrow.style.transform = "rotate(0deg)";
        }
      });
    }
  });

  // Close dropdowns on escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      document.querySelectorAll(".dropdown-menu").forEach((menu) => {
        menu.hidden = true;
        const btn = menu.previousElementSibling;
        const arrow = btn?.querySelector(".dropdown-arrow");
        if (arrow) {
          arrow.style.transform = "rotate(0deg)";
        }
      });
    }
  });
</script>
